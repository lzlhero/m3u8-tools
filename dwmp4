#!/bin/bash

# display usage information
if [ -z "$1" ]; then
  echo "Usage: $(basename "$0") m3u8-url [output.mp4]"
  echo "Based on: aria2c, node and ffmpeg. They must be installed and configured in the PATH environment variable."
  exit 1
fi

# set mp4 output filename
if [ -z "$2" ]; then
  output="output.mp4"
else
  output="$2"
fi
while [[ "$output" == *"." ]]; do
  output="${output%.}"
done
ext="$(echo "${output: -4}" | tr '[:upper:]' '[:lower:]')"
if [ "$ext" != ".mp4" ]; then
  output="${output}.mp4"
fi

# download m3u8 file
aria2c --allow-overwrite=true --continue=false --split=1 -q -o index.m3u8 "$1"

# generate url.txt, file.m3u8 by index.m3u8
node "$(dirname "$0")/src/ppm3u8.js" index.m3u8 "$1"

# download related files by url.txt
echo
echo "Starting to download all related files..."
aria2c -i url.txt

# prompt user to continue
echo
echo "Merge all ts files to \"$output\" file?"
echo "Press any key to continue... (Ctrl+C to exit)"
echo
read -n 1 -s -r

# set m3u8 input filename
input="file.m3u8"

# generate ffmpeg checking log
echo "Generating ffmpeg checking log first..."
ffmpeg -allowed_extensions ALL -protocol_whitelist "file,crypto,data" -i "$input" -c copy -f null /dev/null > ffmpeg.1.log 2>&1

# remove last fixed.m3u8
if [ -f fixed.m3u8 ]; then
  rm fixed.m3u8
fi

# genertate fixed.m3u8 by ffmpeg.1.log
echo
node "$(dirname "$0")/src/fixm3u8.js" "$input" ffmpeg.1.log

# change m3u8 input filename
if [ -f fixed.m3u8 ]; then
  input="fixed.m3u8"
fi

# merge all ts files to mp4 file
echo
echo "Starting to merge..."
ffmpeg -y -allowed_extensions ALL -protocol_whitelist "file,crypto,data" -i "$input" -c copy "$output" > ffmpeg.2.log 2>&1

# display ouptput result
echo
if [ -f "$output" ]; then
  echo "Successfully wrote \"$output\" file."
else
  echo "Failed to write \"$output\" file."
  exit 1
fi
